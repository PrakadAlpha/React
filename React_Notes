::::::::::::::::::::::::::::::::::::::::: REACT LIBRARY ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

 Introduction::
 
  - npx create-react-app my-app or .  => To create a folder and add files or add files in the current folder.
  
 Extras::
  
  - React Extension::
     => rce -> For Class based
     => rfc -> For function based 
     
  - Environment Variables::  
    => .env.local => to store the key and stuff in environmental variables, all starts with REACT_
    => Dev.: (npm start): .env.development.local, .env.development, .env.local, .env
    => Prod.: (npm run build): .env.production.local, .env.production, .env.local, .env
  - Lazy Loading::   
    => import {lazy, Suspence} from 'react'
    => const myComp = lazy(() => import("./components/myComp"));
    => <Suspense fallback={<div>Loading...</div>}>
        <myComp/>
       </Suspense>
::::::::::::::::::::::::::::::::::::::::::::::::::: LifeCycles ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    
    Mount -> constructor -> static getDerivedStateFromProps -> render -> componentDidMount(API calls)
    Update -> static getDerivedStateFromProps -> shouldComponentUpdate -> render -> getSnapshotBeforeUpdate -> componentDidUpdate
    Unmount -> componentWillUnmount
    ErrorBoundary -> getDerivedStateFromError -> componentDidCatch
  
    => Use PureComponent instead of using shouldComponentUpdate hook with condition on props
  
    => useEffect(() => starters, [] ->cause for the change) => Used in place of life cycle hooks  
       => use the same with a return statement for componentWillUnmount()
       
    => export default React.memo(<Component>) => used in place for shouldComponentUpdate()
  
:::::::::::::::::::::::::::::::::::::::::::::::::: Structure :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 
  Class Based => Used when states was needed, but now because of the react hooks functional based can also have states
      
      - import React, {Component} from 'react';
        import './App.css';

       export default class App extends Component {
         state={}
          render(){
            return ( 
              <div className = "App" >
                <h1>Hello React</h1>
              </div>
            );
          }
        }      
  
  Function Based

     - import React from 'react'; => Used when state is not used
       const funName = (prop)=> {
        return (
           <div className = "App" >
                <h1>Hello React</h1>
           </div>
        );
       }
       funName.propTypes = {}
       funName.defaultProps = {}
 
 ::::::::::::::::::::::::::::::::::::::::::::::::::: Core ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 
  - Props :: Class Based:-
  
          => Used to pass values to child components passed in the tag and accessed by
          => {this.props.varName}
          =>   static defaultProps = { -> default props set 
                 title: "NavBar"
               };

               static propTypes = {   -> robust types checking in prop 
                 title: PropTypes.string.isRequired
               }
         => To send a prop up one level, just create a function and pass as paramter and trigger the call in the child with params
         => Props are read only

         :: Function Based:-
         => Passed via function 
         => Func.defaultProps={} and Func.propTypes = {}
         => props.children => to get the values between tags
        
  
  - State :: Class Based:-
          =>  Used to moniter the values changing and update the dom accordingly
          => attaching the input element to the state, using onChange attribute
          => 
         :: Function Based:-
          => const [sample, setSample] = useState('defaultVal')
          
    :::::::::::::::::::::::::::::::::::::::::::: Router ::::::::::::::::::::::::::::::::::::::::::::::::::::::
    
    - npm i react-router-dom and 
      import {BrowserRouter as Router, Switch, Route} from 'react-router-dom';
    - Wrap the App component with <Router>
    - Wrap the Routes around the <Switch>
    - Use <Route exact path='/' render={props => (<All the other components with routes>)}>
    - Use this for seperate comp rendering from '/' <Route exact path='/about' component={About}></Route>
    - Using <a> tag reset the state but Use Link from the dom for the <a> tag to persist the state of the child component
      => <Link to="/">Home</Link>
    - Wrap the child component function withRouter(({history, location, match}) => {}) => To get the details of the current page
    
 ::::::::::::::::::::::::::::::::::::::::::::::: JSX :::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 
    - className => class
    - htmlFor => for 
    - Wrapped around a single parent tag
      => can use <React.Fragment>  or just <></>
    - Anything inside {...} is Javascript  
      
 ::::::::::::::::::::::::::::::::::::::::::::::::::: Styling ::::::::::::::::::::::::::::::::::::::::::::::::
  
   Inline CSS => style={{h1:normalColor}}
   CSS Modules => npm run eject and change to modules: true or Rename the css files to app.module.css
   
:::::::::::::::::::::::::::::::::::::::::::::::::: Hooks ::::::::::::::::::::::::::::::::::::::::::::::::    
    React::  
        useState => To set the states initial val and hook it with the state
        useEffect => To make the code in useEffect() run all the time the component rerenders or controlled by dependencies
        useContext => To use the context and props and state of the context api
        useReducer => To pass in the reducers and the initital state and obtain the state and dispatch actions 
        useCallback => 
        useMemo => 
        useRef => Used to select particular dom element using ref={anyProp} and make changes
        useImperativeHandle => 
        useLayoutEffect => 
        useDebugValue => 
    
    React Router::
        useHistory => 
        useParams => 
        useLocation =>  
        
        
 :::::::::::::::: Issues and Fixes :::::::::::::
 
 System files monitoring limit exceeded::
   Ubuntu:-
    "sudo gedit /etc/sysctl.conf"
    "fs.inotify.max_user_watches=524288" => Add a line at the bottom, Then save and exit!
    "sudo sysctl -p" => To check it
      
::::::::::::::::::::::::::::::::::::::::::::::::::::::::: REDUX ::::::::::::::::::::::::::::::::::::::::::::::::::::::

 
  
















